#!/usr/bin/env python3

import os
import sys
import time
import ctypes
import shutil

# On Windows, this should point to the directory where SDL2.dll is stored
# os.environ["PYSDL2_DLL_PATH"] = "C:\\Users\\Home\\DLL"

import sdl2
import sdl2.ext

KEEP_DIR = 'KEEP'
KEEP_KEY = sdl2.SDLK_RETURN

cwd = os.getcwd()

# Make keep directory
try:
    os.mkdir(KEEP_DIR)
except FileExistsError:
    pass

sdl2.ext.init()


def image_generator():
    for img_file in os.listdir(cwd):
        try:
            yield img_file, sdl2.ext.load_image(img_file)
        except (OSError, sdl2.ext.common.SDLError):
            # Can't load this file as an image - ignore it
            continue


class ImageDisplayer(object):
    WINDOW_SIZE = (640, 480)

    def __init__(self):
        # Initialise window
        self.window = sdl2.ext.Window('Image Sorter', self.WINDOW_SIZE)
        self.window.show()
        # Image generator
        self.image_file = None
        self.images = image_generator()
        # Show first image
        self.show_next_image()

    def find_scaled_dstrect(self, img):
        try:
            win = self.window.get_surface()
            win_dydx = win.w / win.h
            img_dydx = img.w / img.h
            if img_dydx < win_dydx:
                # Image proportions are too tall - return narrower dstrect
                sf = img_dydx / win_dydx
                dst_w = int(win.w * sf)
                dst_x = (win.w - dst_w) // 2
                return sdl2.SDL_Rect(dst_x, 0, dst_w, win.h)
            elif img_dydx > win_dydx:
                # Image proportions are too wide - return shorter dstrect
                sf = win_dydx / img_dydx
                dst_h = int(win.h * sf)
                dst_y = (win.h - dst_h) // 2
                return sdl2.SDL_Rect(0, dst_y, win.w, dst_h)
        except ZeroDivisionError:
            return None
        # Window is perfectly proportioned for image - just use default behaviour
        return None

    def show_next_image(self):
        try:
            self.image_file, image = next(self.images)
            sdl2.ext.fill(self.window.get_surface(), 0)
            sdl2.SDL_BlitScaled(image, None, self.window.get_surface(), self.find_scaled_dstrect(image))
            time.sleep(0.05)  # FIXME: It seems there's a race condiion on displaying the first image correctly...
            sdl2.SDL_UpdateWindowSurface(self.window.window)
        except StopIteration:
            return False
        return True

    def save_image(self):
        # Save image
        dest_path = os.path.join(KEEP_DIR, self.image_file)
        shutil.copy2(self.image_file, dest_path)


def run():
    running = True
    displayer = ImageDisplayer()
    event = sdl2.SDL_Event()
    while running:
        while sdl2.SDL_PollEvent(ctypes.byref(event)) != 0:
            if event.type == sdl2.SDL_QUIT:
                running = False
            elif event.type == sdl2.SDL_KEYDOWN:
                keysym = event.key.keysym.sym
                if keysym == KEEP_KEY:
                    displayer.save_image()
                running = displayer.show_next_image()

try:
    run()
except Exception as e:
    print('Unexpected error:')
    import traceback
    traceback.print_exception(*sys.exc_info())

sdl2.ext.quit()
